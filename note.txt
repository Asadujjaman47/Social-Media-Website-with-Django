1. Project setup:
    i.  create project:
            > django-admin startproject My_Social_Project
    ii. create virtual enviroment in CMD:
            python -m venv env
            env\Scripts\activate
    iii. create & install requirements.txt:
            Django==3.0.2

            > pip install -r requirements.txt

    iv. create app App_Login:
            > py manage.py startapp App_Login
    
    v. add app in settings.py:
    vi. create filder: templates, media, static
        and add them in settings.py:


 2. Login System: prerequire, must be Login!      
        i. create folder templates/App_Login:

        ii. main urls.py:
                // here add all media and static file

                        from django.urls import path, include
                        from django.conf import settings
                        from django.contrib.staticfiles.urls import static, staticfiles_urlpatterns


                        urlpatterns += staticfiles_urlpatterns()
                        urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


        iii. create App_Login/urls.py:

                from django.urls import path
                from App_Login import views

                app_name= "App_Login"

                urlpatterns = [
                
                ]
        
        iv. create App_Login/forms.py:
                from dataclasses import field
                from pyexpat import model
                from django import forms
                from django.contrib.auth.forms import UserCreationForm
                from django.contrib.auth.models import User


                class CreateNewUser(UserCreationForm):
                email = forms.EmailField(required=True)

                class Meta:
                        model = User
                        fields = ('email', 'username', 'password1', 'password2')

        v. App_Login/views.py:

                from atexit import register
                from django.shortcuts import render, HttpResponseRedirect
                from App_Login.forms import CreateNewUser
                from django.contrib.auth import authenticate, login, logout
                from django.urls import reverse, reverse_lazy


                # Create your views here.

                def sign_up(request):
                form = CreateNewUser()
                registered = False
                if request.method == 'POST':
                        form = CreateNewUser(data=request.POST)
                        if form.is_valid():
                        user = form.save()
                        registered = True
                        pass

                return render(request, 'App_Login/signup.html', context={'title': 'Sign up . Instagram', 'form': form})

        vi. install crispy form:
               > pip install django-crispy-forms
        
        vii. add crispy form:
                INSTALLED_APPS = [
                        'crispy_forms',
                ]

                CRISPY_TEMPLATE_PACK = 'bootstrap4'
        

        viii. base html: templates/base.html:

                <title>{% block title_block %} Social {% endblock%}</title>
                </head>
                <body>
                <div class="container">
                        {% block body_block %}  {% endblock %}

                </div>
                </body>


3. App_Login under sign up page:     
        i.create templates\App_Login\signup.html:
        // extend base.html file

                {% extends 'base.html' %}
                {% load crispy_forms_tags %}
                {% block title_block %} {{title}} {% endblock %}

                {% block body_block %}
                <div>
                        <form method="POST">
                                {{ form|crispy }}
                                {% csrf_token %}
                                <button type="submit" class="btn btn-primary btn-sm" style="width:100%" >Sign up</button>
                        </form>
                </div>
                {% endblock %}


        ii. url mapping at App_Login/urls.py:
            path('signup/', views.sign_up, name="sign_up"),

        iii. main urls.py:
                path('accounts/', include('App_Login.urls')),

// now design form:
        iv. add css:
            base.html:
            
                {% block css_block %}
                {% endblock %}
                


        v. sign_up.html:
                {% extends 'base.html' %}
                {% load crispy_forms_tags %}
                {% block title_block %} {{title}} {% endblock %}
                {% block css_block %}
                <style>
                .sign_up {
                        width: 550px;
                        border: 1px solid #ccc;
                        padding: 40px;
                }
                .log_in{
                        width: 550px;
                        padding: 40px;
                        border: 1px solid #ccc;

                }
                </style>
                {% endblock %}
                {% block body_block %}
                <center>
                <div class='sign_up'>
                        <h3>Sign up to see photos from your friends.</h3>
                        <form method="POST">
                                {{ form|crispy }}
                                {% csrf_token %}
                                <button type="submit" class="btn btn-primary btn-sm" style="width:100%" >Sign up</button>
                        </form>
                </div>
                <br>
                <div class="log_in">
                <p> Have an account? <a href="#">Log in</a></p> 
                </div>
                </center>
                {% endblock %}


        vi. base.html:
                <div class="container" style="padding-top: 20px">


we can run server:
        http://127.0.0.1:8000/accounts/signup/
                



        vii. password and others field edit in forms.py:
                username = forms.CharField(required=True, label="", widget=forms.TextInput(
                        attrs={'placeholder': 'Username'}))
                password1 = forms.CharField(
                        required=True,
                        label="",
                        widget=forms.PasswordInput(attrs={'placeholder': 'Password'})
                )
                password2 = forms.CharField(
                        required=True,
                        label="",
                        widget=forms.PasswordInput(
                        attrs={'placeholder': 'Password Confirmation'})
                )
        
        viii. migration run:
                > py manage.py migrate
                > py manage.py makemigrations App_Login
                > py manage.py migrate


        ix. create super user:
                > py manage.py createsuperuser
                        Username (leave blank to use 'asadu'): admin
                        Email address: asadujjaman255@gmail.com
                        Password: 1234
                        Password (again):
                        This password is too short. It must contain at least 8 characters.
                        This password is too common.
                        This password is entirely numeric.
                        Bypass password validation and create user anyway? [y/N]: y
                        Superuser created successfully.


        // now complate signup task:
        user created and save user's information, now need to:  create a model:
        x.  App_Login\models.py:

                from django.db import models
                from django.contrib.auth.models import User

                # Create your models here.


                class UserProfile(models.Model):
                user = models.OneToOneField(
                        User, on_delete=models.CASCADE, related_name='user_profile')
                profile_pic = models.ImageField(upload_to='profile_pics')
                dob = models.DateField()
                website = models.URLField()
                facebook = models.URLField()



        xi. create folder in media\profile_pics:




        // models.py> UserProfile e info save hobe, then views.py te o e sob entry jabe:
        xii. views.py:

                from App_Login.models import UserProfile


                def sign_up(request):
                form = CreateNewUser()
                registered = False
                if request.method == 'POST':
                        form = CreateNewUser(data=request.POST)
                        if form.is_valid():
                        user = form.save()
                        registered = True
->                      user_profile = UserProfile(user=user)
                        pass

                return render(request, 'App_Login/signup.html', context={'title': 'Sign up . Instagram', 'form': form})


4. Login option create for user:
        i. create a templates\App_Login\login.html:

        ii. views.py:
                def login_page(request):
                form = AuthenticationForm()
                if request.method == 'POST':
                        form = AuthenticationForm(data=request.POST)
                        if form.is_valid():
                        username = form.cleaned_data.get('username')
                        password = form.cleaned_data.get('password')
                        user = authenticate(username=username, password=password)

                        # user active or not:
                        if user is not None:
                                login(request, user)
                                pass

                return render(request, 'App_Login/login.html', context={'title': 'Login', 'form': form})
        

        // define it's url pattern:
        iii. urls.py:
                path('login/', views.login_page, name='login'),


        // if successfully signup, then redirect to login page:
        iv. views.py > sign_up:
            return HttpResponseRedirect(reverse('App_Login:login'))


        v. sign_up.html:
                <p> Have an account? <a href="{% url 'App_Login:login' %}">Log in</a></p> 

        vi. login.html:
                {% extends 'base.html' %}
                {% load crispy_forms_tags %}
                {% block title_block %} {{title}} {% endblock %}


                <div class="">
                <form method="POST">
                        {{ form|crispy }}
                        {% csrf_token %}
                        <button type="submit">Log In</button>
                </form>
                </div>

        vii. add CSS in login.html:

                {% block css_block %}
                <style>
                .sign_up {
                        width: 550px;
                        border: 1px solid #ccc;
                        padding: 25px;
                }
                .log_in{
                        width: 550px;
                        padding: 40px;
                        border: 1px solid #ccc;

                }
                </style>
                {% endblock %}
        
        viii. login.html:
                <center>
                <div class="log_in">
                        <form method="POST">
                        {{ form|crispy }}
                        {% csrf_token %}
                        <button type="submit" class="btn btn-primary" style="width:100%">Log In</button>
                        </form>
                </div>
                <br>
                <div class="sign_up">
                        <p> Don't have a account? <a href="{% url 'App_Login:sign_up' %}">Sign up</a></p> 
                </div>
                </center>

        ix. pip install Pillow

5. profile page:
        i. create templates\App_Login\profile.html:

        ii. create templates\navbar.html:
                cut all code of base.html
                and paste in navbar.html


        // navbar.html ke profile.html e inharite:
        iii. profile.html:
                {% extends 'navbar.html' %}
                {% load crispy_fomrs_tags %}


        // now create navigation bar:
        iv. navbar.html:
                <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
                        <ul class="navbar-nav">
                        <li class="nav-item active">
                                <a class="nav-link" href="#">Home</a>
                        </li>
                        <li class="nav-item">
                                <a class="nav-link"></a>
                        </li>
                        </ul>
                </nav>


        v. views.py:
        from django.contrib.auth.decorators import login_required

        @login_required
        def edit_profile(request):
        pass




