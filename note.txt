1. Project setup:
    i.  create project:
            > django-admin startproject My_Social_Project
    ii. create virtual enviroment in CMD:
            python -m venv env
            env\Scripts\activate
    iii. create & install requirements.txt:
            Django==3.0.2

            > pip install -r requirements.txt

    iv. create app App_Login:
            > py manage.py startapp App_Login
    
    v. add app in settings.py:
    vi. create filder: templates, media, static
        and add them in settings.py:


 2. Login System: prerequire, must be Login!      
        i. create folder templates/App_Login:

        ii. main urls.py:
                // here add all media and static file

                        from django.urls import path, include
                        from django.conf import settings
                        from django.contrib.staticfiles.urls import static, staticfiles_urlpatterns


                        urlpatterns += staticfiles_urlpatterns()
                        urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


        iii. create App_Login/urls.py:

                from django.urls import path
                from App_Login import views

                app_name= "App_Login"

                urlpatterns = [
                
                ]
        
        iv. create App_Login/forms.py:
                from dataclasses import field
                from pyexpat import model
                from django import forms
                from django.contrib.auth.forms import UserCreationForm
                from django.contrib.auth.models import User


                class CreateNewUser(UserCreationForm):
                email = forms.EmailField(required=True)

                class Meta:
                        model = User
                        fields = ('email', 'username', 'password1', 'password2')

        v. App_Login/views.py:

                from atexit import register
                from django.shortcuts import render, HttpResponseRedirect
                from App_Login.forms import CreateNewUser
                from django.contrib.auth import authenticate, login, logout
                from django.urls import reverse, reverse_lazy


                # Create your views here.

                def sign_up(request):
                form = CreateNewUser()
                registered = False
                if request.method == 'POST':
                        form = CreateNewUser(data=request.POST)
                        if form.is_valid():
                        user = form.save()
                        registered = True
                        pass

                return render(request, 'App_Login/signup.html', context={'title': 'Sign up . Instagram', 'form': form})

        vi. install crispy form:
               > pip install django-crispy-forms
        
        vii. add crispy form:
                INSTALLED_APPS = [
                        'crispy_forms',
                ]

                CRISPY_TEMPLATE_PACK = 'bootstrap4'
        

        viii. base html: templates/base.html:

                <title>{% block title_block %} Social {% endblock%}</title>
                </head>
                <body>
                <div class="container">
                        {% block body_block %}  {% endblock %}

                </div>
                </body>


3. App_Login under sign up page:     
        i.create templates\App_Login\signup.html:
        // extend base.html file

                {% extends 'base.html' %}
                {% load crispy_forms_tags %}
                {% block title_block %} {{title}} {% endblock %}

                {% block body_block %}
                <div>
                        <form method="POST">
                                {{ form|crispy }}
                                {% csrf_token %}
                                <button type="submit" class="btn btn-primary btn-sm" style="width:100%" >Sign up</button>
                        </form>
                </div>
                {% endblock %}


        ii. url mapping at App_Login/urls.py:
            path('signup/', views.sign_up, name="sign_up"),

        iii. main urls.py:
                path('accounts/', include('App_Login.urls')),

// now design form:
        iv. add css:
            base.html:
            
                {% block css_block %}
                {% endblock %}
                


        v. sign_up.html:
                {% extends 'base.html' %}
                {% load crispy_forms_tags %}
                {% block title_block %} {{title}} {% endblock %}
                {% block css_block %}
                <style>
                .sign_up {
                        width: 550px;
                        border: 1px solid #ccc;
                        padding: 40px;
                }
                .log_in{
                        width: 550px;
                        padding: 40px;
                        border: 1px solid #ccc;

                }
                </style>
                {% endblock %}
                {% block body_block %}
                <center>
                <div class='sign_up'>
                        <h3>Sign up to see photos from your friends.</h3>
                        <form method="POST">
                                {{ form|crispy }}
                                {% csrf_token %}
                                <button type="submit" class="btn btn-primary btn-sm" style="width:100%" >Sign up</button>
                        </form>
                </div>
                <br>
                <div class="log_in">
                <p> Have an account? <a href="#">Log in</a></p> 
                </div>
                </center>
                {% endblock %}


        vi. base.html:
                <div class="container" style="padding-top: 20px">


we can run server:
        http://127.0.0.1:8000/accounts/signup/
                



        vii. password and others field edit in forms.py:
                username = forms.CharField(required=True, label="", widget=forms.TextInput(
                        attrs={'placeholder': 'Username'}))
                password1 = forms.CharField(
                        required=True,
                        label="",
                        widget=forms.PasswordInput(attrs={'placeholder': 'Password'})
                )
                password2 = forms.CharField(
                        required=True,
                        label="",
                        widget=forms.PasswordInput(
                        attrs={'placeholder': 'Password Confirmation'})
                )
        
        viii. migration run:
                > py manage.py migrate
                > py manage.py makemigrations App_Login
                > py manage.py migrate


        ix. create super user:
                > py manage.py createsuperuser
                        Username (leave blank to use 'asadu'): admin
                        Email address: asadujjaman255@gmail.com
                        Password: 1234
                        Password (again):
                        This password is too short. It must contain at least 8 characters.
                        This password is too common.
                        This password is entirely numeric.
                        Bypass password validation and create user anyway? [y/N]: y
                        Superuser created successfully.


        // now complate signup task:
        user created and save user's information, now need to:  create a model:
        x.  App_Login\models.py:

                from django.db import models
                from django.contrib.auth.models import User

                # Create your models here.


                class UserProfile(models.Model):
                user = models.OneToOneField(
                        User, on_delete=models.CASCADE, related_name='user_profile')
                profile_pic = models.ImageField(upload_to='profile_pics')
                dob = models.DateField()
                website = models.URLField()
                facebook = models.URLField()



        xi. create folder in media\profile_pics:




        // models.py> UserProfile e info save hobe, then views.py te o e sob entry jabe:
        xii. views.py:

                from App_Login.models import UserProfile


                def sign_up(request):
                form = CreateNewUser()
                registered = False
                if request.method == 'POST':
                        form = CreateNewUser(data=request.POST)
                                if form.is_valid():
                                user = form.save()
                                registered = True
        ->                      user_profile = UserProfile(user=user)
                                user_profile.save()
                                pass

                return render(request, 'App_Login/signup.html', context={'title': 'Sign up . Instagram', 'form': form})


4. Login option create for user:
        i. create a templates\App_Login\login.html:

        ii. views.py:
                def login_page(request):
                form = AuthenticationForm()
                if request.method == 'POST':
                        form = AuthenticationForm(data=request.POST)
                        if form.is_valid():
                        username = form.cleaned_data.get('username')
                        password = form.cleaned_data.get('password')
                        user = authenticate(username=username, password=password)

                        # user active or not:
                        if user is not None:
                                login(request, user)
                                pass

                return render(request, 'App_Login/login.html', context={'title': 'Login', 'form': form})
        

        // define it's url pattern:
        iii. urls.py:
                path('login/', views.login_page, name='login'),


        // if successfully signup, then redirect to login page:
        iv. views.py > sign_up:
            return HttpResponseRedirect(reverse('App_Login:login'))


        v. sign_up.html:
                <p> Have an account? <a href="{% url 'App_Login:login' %}">Log in</a></p> 

        vi. login.html:
                {% extends 'base.html' %}
                {% load crispy_forms_tags %}
                {% block title_block %} {{title}} {% endblock %}


                <div class="">
                <form method="POST">
                        {{ form|crispy }}
                        {% csrf_token %}
                        <button type="submit">Log In</button>
                </form>
                </div>

        vii. add CSS in login.html:

                {% block css_block %}
                <style>
                .sign_up {
                        width: 550px;
                        border: 1px solid #ccc;
                        padding: 25px;
                }
                .log_in{
                        width: 550px;
                        padding: 40px;
                        border: 1px solid #ccc;

                }
                </style>
                {% endblock %}
        
        viii. login.html:
                <center>
                <div class="log_in">
                        <form method="POST">
                        {{ form|crispy }}
                        {% csrf_token %}
                        <button type="submit" class="btn btn-primary" style="width:100%">Log In</button>
                        </form>
                </div>
                <br>
                <div class="sign_up">
                        <p> Don't have a account? <a href="{% url 'App_Login:sign_up' %}">Sign up</a></p> 
                </div>
                </center>

        ix. pip install Pillow

5. profile page:
        i. create templates\App_Login\profile.html:

        ii. create templates\navbar.html:
                cut all code of base.html
                and paste in navbar.html


        // navbar.html ke profile.html e inharite:
        iii. profile.html:
                {% extends 'navbar.html' %}
                {% load crispy_fomrs_tags %}


        // now create navigation bar:
        iv. navbar.html:
                <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
                        <ul class="navbar-nav">
                        <li class="nav-item active">
                                <a class="nav-link" href="#">Home</a>
                        </li>
                        <li class="nav-item">
                                <a class="nav-link"></a>
                        </li>
                        </ul>
                </nav>


        v. views.py:
        from django.contrib.auth.decorators import login_required

        @login_required
        def edit_profile(request):
            return render(request, 'App_Login/profile.html', context={})


        vi. urls.py:
            path('edit/', views.edit_profile, name="edit"),


        vii. models.py: blank=Ture korbo
                profile_pic = models.ImageField(upload_to='profile_pics', blank=True)
                dob = models.DateField(blank=True, null=True)
                website = models.URLField(blank=True)
                facebook = models.URLField(blank=True)


        // now create its form:
        viii. forms.py:
                from App_Login.models import UserProfile

                        class EditProfile(forms.ModelForm):
                                class Meta:
                                        model = UserProfile
                                        fields = "__all__"

        ix. views.py:
                @login_required
                def edit_profile(request):
                form = EditProfile(instance=request.user)
                
                return render(request, 'App_Login/profile.html', context={'form': form})

        x. admin.py:
                from .models import UserProfile

                # Register your models here.
                admin.site.register(UserProfile)

        xi. views.py:
        @login_required
        def edit_profile(request):
                current_user = UserProfile.objects.get(user=request.user)
                form = EditProfile(instance=current_user)

                return render(request, 'App_Login/profile.html', context={'form': form, 'title':'Edit Profile . Social'})


        xii. profile.html:
                {% block title_block %}{{title}}{% endblock %}
                {% block css_block %}

                {% endblock %}
                {% block body_block%}
                <form method="POST" enctype="multipart/form-data">
                        {{form|crispy}}
                        {% csrf_token %}
                        <button type="submit" name="button" class="btn btn-primary">Submit</button>
                </form>
                {% endblock %}


        xiii. views.py:
                @login_required
                def edit_profile(request):
                current_user = UserProfile.objects.get(user=request.user)
                form = EditProfile(instance=current_user)
                if request.method == 'POST':
                        form = EditProfile(request.POST, request.FILES, instance=current_user)
                        if form.is_valid():
                        form.save(commit=True)
                        form = EditProfile(instance=current_user)

                return render(request, 'App_Login/profile.html', context={'form': form, 'title': 'Edit Profile . Social'})
        

        Xiv: forms.py:
                class EditProfile(forms.ModelForm):
                        dob = forms.DateField(widget=forms.TextInput(attrs={'type': 'date',}))

                        class Meta:
                                model = UserProfile
                                exclude = ('user', )

6. show social site post:
        i. > py manage.py startapp App_Posts

        ii. include App_Posts in settings.py:


        iii. create App_Posts\urls.py:

        iv. main project urls.py:
                path('post/', include('App_Posts.urls')),

        v. write view in App_Posts\views.py:
                from django.shortcuts import HttpResponse

                # Create your views here.

                def home(request):
                return HttpResponse("Homepage")

        vi. urls.py:
                from django.urls import path
                from App_Posts import views

                app_name = 'App_Posts'

                urlpatterns = [
                        path("", views.home, name='home'),

                ]

        v. navbar.html:
                <a class="nav-link" href="{% url 'App_Posts:home' %}">Home</a>


        vi. main urls.py:
                from App_Posts import views
                path('', views.home, name='home'),

        vii. views.py:
                from django.contrib.auth.decorators import login_required
                # Create your views here.


                @login_required
                def home(request):
                        return HttpResponse("Homepage")


        viii. create folder App_Posts and file home.html:
                {% extends 'navbar.html' %}
                {% block title_block %} {% endblock %}

                {% block body_block %}
                <h1>Homepage</h1>

                {% endblock %}

        ix. view.py:
                @login_required
                def home(request):
                        return render(request, 'App_Posts/home.html', context={'title': 'Home'})
                                


7. create logout view:
        i. App_Login/views.py:
                @login_required
                def logout_user(request):
                        logout(request)
                        return HttpResponseRedirect(reverse('App_Login:login'))


        ii. urls.py:
                path('logout/', views.logout_user, name='logout'),



        ii. navbar.html:
                <a class="nav-link" href="{% url 'App_Login:logout' %}">Logout</a>

8. after login:
        App_Login\views.py:
                return HttpResponseRedirect(reverse('App_Posts:home'))


// now signup and sign in,
        then it redirect to Homepage



9. Profile picture:
        if profile -> show profile
        else: default profile picture for all user:
        i. navbar.html:
                <li class="nav-item">
                        {% if user.user_profile.profile_pic %}
                        <a class="nav-link" href="#">
                                <img src="/media/{{user.user_profile.profile_pic}} width="40px" height="40px" class="rounded-circle">
                        </a>
                        {% else %}
                        <a class="nav-link" href="#">
                                <img src="/media/default.png" width="40px" height="40px" class="rounded-circle">
                        </a>
                        {% endif %}
                </li>



10. post create, follower, following, likes model:
        i. App_Posts\models:

                from django.contrib.auth.models import User
                # Create your models here.


                class Post(models.Model):
                author = models.ForeignKey(
                        User, on_delete=models.CASCADE, related_name='post')
                image = models.ImageField(upload_to='post_images')
                caption = models.CharField(max_length=264, blank=True)
                upload_date = models.DateTimeField(auto_now_add=True)
                update_date = models.DateTimeField(auto_now=True)

                class Meta:
                        ordering = ['-uploadd_date', ]


                class Like(models.Model):
                post = models.ForeignKey(
                        Post, on_delete=models.CASCADE, related_name='liked_post')
                user = models.ForeignKey(
                        User, on_delete=models.CASCADE, related_name='liker')
                date_created = models.DateTimeField(auto_now_add=True)

                def __str__(self):
                        return '{} : {}'.format(self.user, self.post)


        
        // create followers
        ii. App_Login\models.py:

        
        class Follow(models.Model):
                follower = models.ForeignKey(
                        User, on_delete=models.CASCADE, related_name='follower')
                following = models.ForeignKey(
                        User, on_delete=models.CASCADE, related_name='following')

                created_date = models.DateTimeField(auto_now_add=True)


        iii. add model in App_Login\admin.py:
                admin.site.register(Follow)

        iv. add model in App_Posts\admin.py:
                admin.site.register(Post)
                admin.site.register(Like)
        
        v. migration:
                > py manage.py migrate
                > py manage.py makemigrations App_Login
                > py manage.py makemigrations App_Posts
                > py manage.py migrate

// now, we can see tables from admin panel. 




11. click profile pic to go profile:
        i. App_Login\views.py:
                @login_required
                def profile(request):
                        return render(request, 'App_Login/user.html', context={})
        
        ii. create a file in templates\App_Login\user.html:
                {% extends 'navbar.html' %}
                {% block title_block %} {{title}} {% endblock %}

                {% block body_block %}


                {% endblock %}
        
        iii. App_Login/urls.py:
                path('profile/', views.profile, name='profile'),


        iv. navbar.html:
                <li class="nav-item">
                        {% if user.user_profile.profile_pic %}
                                <a class="nav-link" href="{% url 'App_Login:profile' %}">
                                        <img src="/media/{{user.user_profile.profile_pic}} width="40px" height="40px" class="rounded-circle">
                                </a>
                        {% else %}
                                <a class="nav-link" href="{% url 'App_Login:profile' %}">
                                        <img src="/media/default.png" width="40px" height="40px" class="rounded-circle">
                                </a>
                        {% endif %}
                </li>

        v. views.py:
                context={'title': 'User'}


        vi. Add user full name:
        App_Login\models.py > UserProfile:
                full_name = models.CharField(max_length=264, blank=True)

        and run migrations:



        vii. user.html:
                {% block title_block %} {{user.user_profile.full_name}} (@{{user.username}}) {% endblock %}
                
                {% block body_block %}
                <div class="row">
                <div class="col-sm-4">
                        {% if user.user_profile.profile_pic %}
                        <img src="/media/{{user.user_profile.profile_pic}} width="250px" height="250px" class="rounded-circle">
                        
                        {% else %}
                        <img src="/media/default.png" width="250px" height="250px" class="rounded-circle">
                        
                        {% endif %}
                </div>
                <div class="col-sm-8">

                </div>
                </div>

                {% endblock %}
        
        
        viii. navbar.html:      padding : 30
                <div class="container" style="padding-top: 30px">
                        {% block body_block %}  {% endblock %}

                </div>



        ix. user.html:  &nbsp; = extra grap
        // post count, follwer, following:

                <div class="col-sm-8">
                        <h3>{{user.username}} &nbsp; <a href="{% url 'App_Login:edit' %}" class="btn btn-dark">Edit Profile</a></h3>
                        <br>
                        <h4>{{user.post.count}} posts &nbsp; &nbsp; {{user.following.count}} followers &nbsp; &nbsp; {{user.follower.count}} following</h4>
                        <br>
                        <h4>{{user.user_profile.full_name}}</h4>
                </div>


        x. views.py > edit_profile:
                    return HttpResponseRedirect(reverse('App_Login:profile'))


        xi. App_Login > models.py > UserProfile:
                description = models.TextField(blank=True)

        // and make migration

        xii. user.html:
                <h6>{{user.user_profile.description|linebreaks}}</h6>


12. form create for post:
        i. create App_Posts\forms.py:
        
                from django import forms
                from App_Posts.models import Post


                class PostForm(forms.ModelForm):

                class Meta:
                        model = Post
                        fields = ['image', 'caption',]


        ii. App_Login\views.py:

                @login_required
                def profile(request):
                form = PostForm()
                if request.method == 'POST':
                        form = PostForm(request.POST, request.FILES)
                        if form.is_valid():
                        post = form.save(commit=False)
                        post.author = request.user
                        post.save()
                        return HttpResponseRedirect(reverse('home'))


                return render(request, 'App_Login/user.html', context={'title': 'User', 'form': form})


// now display this form in user.html:
// here we use Modal:
        iii. user.html:
                <!-- Button to Open the Modal -->
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal">
                New Post
                </button>

                <!-- The Modal -->
                <div class="modal" id="myModal">
                <div class="modal-dialog">
                <div class="modal-content">
                
                        <!-- Modal Header -->
                        <div class="modal-header">
                        <h4 class="modal-title">Post a Photo</h4>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        </div>
                
                        <!-- Modal body -->
                        <div class="modal-body">
                        <form method="POST" enctype="multipart/form-data">
                                {{form.as_p}}
                                {% csrf_token %}
                                <button type="submit" class="btn btn-primary">Post</button>
                        </form>
                        </div>
                
                        <!-- Modal footer -->
                        <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                        </div>
                
                </div>
                </div>
                </div>



13. user upload image(show in his profile):
        i. user.html:
                <br>
                <div class="row">
                {% for post in user.post.all %}
                        <div class="crop">
                                <img src="/media/{{post.image}}" title="{{post.caption}}">
                        </div>
                {% endfor %}

                </div>

        <style>
        .crop {
        width: 200px;
        height: 200px;
        overflow: hidden;
        }

        .crop img{
        width: 400px;
        height: 300px;
        margin: -75px 0 0 -100px;
        }
        </style>

        {% endblock %}



14. add search bar in navbar:
        i. navbar.html:
        // add in navbar:
                &nbsp; &nbsp; &nbsp;
                        <form class="form-inline" method="GET">
                        <input class="form-control mr-sm-2" type="text" name="search" placeholder="Search">
                        <button class="btn btn-success" type="submit">Search</button>
                </form>

        ii. App_Posts/ views.py:
        def home(request):
                if request.method == 'GET':
                        search = request.GET.get('search')

                return render(request, 'App_Posts/home.html', context={'title': 'Home', 'search': search})

        // test search:
        iii. home.html:
                {% block body_block %}
                        {% if search %}
                                {{search}}
                {% else %}

                {% endif %}

                {% endblock %}


        iv. views.py:
                def home(request):
                        if request.method == 'GET':
                                search = request.GET.get('search')
                                result = User.objects.filter(username=search)

                        return render(request, 'App_Posts/home.html', context={'title': 'Home', 'search': search, 'result': result})


        v. home.html:
                {% if search %}
                {% for user in result %}
                        {{user.username}}
                {% endfor %}


// now if search partial match:
        vi. views.py:
        @login_required
        def home(request):
                if request.method == 'GET':
                        search = request.GET.get('search', '')
                        result = User.objects.filter(username__icontains=search)

                return render(request, 'App_Posts/home.html', context={'title': 'Home', 'search': search, 'result': result})



        vii. home.html:
                {% block body_block %}
                {% if search %}
                {% for user in result %}
                <div class="row">
                        <div class="col-sm-2">
                        {% if user.user_profile.profile_pic %}
                                <img src="/media/{{user.user_profile.profile_pic}}" width="75px" height="75px" class="rounded-circle">
                        
                        {% else %}
                                <img src="/media/default.png" width="75px" height="75px" class="rounded-circle">
                        
                        {% endif %}
                        </div>
                        <div class="col-sm-10">
                        
                        <a href="{% url 'App_Login:user' username=user.username %}">{{user.username}}</a>
                        <br>
                        {{user.user_profile.full_name}}
                        </div>
                </div>
                        
                {% endfor %}
                
                {% else %}

                {% endif %}

                {% endblock %}


        viii. App_Login/urls.py:
            path('user/<username>/', views.user, name='user'),

        ix. App_Login/views.py:
                @login_required
                def user(request, username):
                        user_other = User.objects.get(username=username)
                        if user_other == request.user:
                                return HttpResponseRedirect(reverse('App_Login:profile'))

                        return render(request, 'App_Login/user_others.html', context={'user_other': user_other})


        x. create templates\App_Login\user_others.html:
                {% extends 'navbar.html' %}
                {% block title_block %} {{user_other.user_profile.full_name}} (@{{user_other.username}}) {% endblock %}
                {% block css_block %}
                <style>
                .crop {
                width: 200px;
                height: 200px;
                overflow: hidden;
                }

                .crop img{
                width: 400px;
                height: 300px;
                margin: -75px 0 0 -100px;
                }
                </style>
                {% endblock %}

                {% block body_block %}
                <div class="row">
                <div class="col-sm-4">
                        {% if user_other.user_profile.profile_pic %}
                        <img src="/media/{{user_other.user_profile.profile_pic}}" width="250px" height="250px" class="rounded-circle">
                        
                        {% else %}
                        <img src="/media/default.png" width="250px" height="250px" class="rounded-circle">
                        
                        {% endif %}
                </div>
                <div class="col-sm-8">
                        <h1>{{user_other.username}} &nbsp; </h1>
                        <br>
                        <h4>{{user_other.post.count}} posts &nbsp; &nbsp; {{user_other.following.count}} followers &nbsp; &nbsp; {{user_other.follower.count}} following</h4>
                        <br>
                        <h3>{{user_other.user_profile.full_name}}</h3>
                        <p>{{user_other.user_profile.description|linebreaks}}</p>
                </div>
                </div>
                <hr>
                <br>
                <br>
                <div class="row">
                {% for post in user_other.post.all %}
                <div class="crop">
                <img src="/media/{{post.image}}" title="{{post.caption}}">
                </div>
                {% endfor %}

                </div>

                {% endblock %}






